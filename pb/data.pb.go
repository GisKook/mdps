// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

package Report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataCommand_CommandType int32

const (
	DataCommand_CMT_INVALID DataCommand_CommandType = 0
	// das->dps
	DataCommand_CMT_REP_DATA_UPLOAD_MONITORS DataCommand_CommandType = 32779
	DataCommand_CMT_REP_DATA_UPLOAD_ALTERS   DataCommand_CommandType = 32780
)

var DataCommand_CommandType_name = map[int32]string{
	0:     "CMT_INVALID",
	32779: "CMT_REP_DATA_UPLOAD_MONITORS",
	32780: "CMT_REP_DATA_UPLOAD_ALTERS",
}
var DataCommand_CommandType_value = map[string]int32{
	"CMT_INVALID":                  0,
	"CMT_REP_DATA_UPLOAD_MONITORS": 32779,
	"CMT_REP_DATA_UPLOAD_ALTERS":   32780,
}

func (x DataCommand_CommandType) String() string {
	return proto.EnumName(DataCommand_CommandType_name, int32(x))
}
func (DataCommand_CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type Monitor struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ModusAddr uint32 `protobuf:"varint,2,opt,name=modus_addr" json:"modus_addr,omitempty"`
	DataType  uint32 `protobuf:"varint,3,opt,name=data_type" json:"data_type,omitempty"`
	DataLen   uint32 `protobuf:"varint,4,opt,name=data_len" json:"data_len,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Monitor) Reset()                    { *m = Monitor{} }
func (m *Monitor) String() string            { return proto.CompactTextString(m) }
func (*Monitor) ProtoMessage()               {}
func (*Monitor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Monitor) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Monitor) GetModusAddr() uint32 {
	if m != nil {
		return m.ModusAddr
	}
	return 0
}

func (m *Monitor) GetDataType() uint32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *Monitor) GetDataLen() uint32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *Monitor) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Alter struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ModusAddr uint32 `protobuf:"varint,2,opt,name=modus_addr" json:"modus_addr,omitempty"`
	DataType  uint32 `protobuf:"varint,3,opt,name=data_type" json:"data_type,omitempty"`
	DataLen   uint32 `protobuf:"varint,4,opt,name=data_len" json:"data_len,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Status    uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (m *Alter) Reset()                    { *m = Alter{} }
func (m *Alter) String() string            { return proto.CompactTextString(m) }
func (*Alter) ProtoMessage()               {}
func (*Alter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Alter) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alter) GetModusAddr() uint32 {
	if m != nil {
		return m.ModusAddr
	}
	return 0
}

func (m *Alter) GetDataType() uint32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *Alter) GetDataLen() uint32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *Alter) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Alter) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type DataCommand struct {
	Uuid         string                  `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Tid          uint64                  `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
	SerialNumber uint32                  `protobuf:"varint,3,opt,name=serial_number" json:"serial_number,omitempty"`
	SerialPort   uint32                  `protobuf:"varint,4,opt,name=serial_port" json:"serial_port,omitempty"`
	Type         DataCommand_CommandType `protobuf:"varint,5,opt,name=type,enum=Report.DataCommand_CommandType" json:"type,omitempty"`
	Monitors     []*Monitor              `protobuf:"bytes,6,rep,name=monitors" json:"monitors,omitempty"`
	Alters       []*Alter                `protobuf:"bytes,7,rep,name=alters" json:"alters,omitempty"`
}

func (m *DataCommand) Reset()                    { *m = DataCommand{} }
func (m *DataCommand) String() string            { return proto.CompactTextString(m) }
func (*DataCommand) ProtoMessage()               {}
func (*DataCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DataCommand) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *DataCommand) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *DataCommand) GetSerialNumber() uint32 {
	if m != nil {
		return m.SerialNumber
	}
	return 0
}

func (m *DataCommand) GetSerialPort() uint32 {
	if m != nil {
		return m.SerialPort
	}
	return 0
}

func (m *DataCommand) GetType() DataCommand_CommandType {
	if m != nil {
		return m.Type
	}
	return DataCommand_CMT_INVALID
}

func (m *DataCommand) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

func (m *DataCommand) GetAlters() []*Alter {
	if m != nil {
		return m.Alters
	}
	return nil
}

func init() {
	proto.RegisterType((*Monitor)(nil), "Report.Monitor")
	proto.RegisterType((*Alter)(nil), "Report.Alter")
	proto.RegisterType((*DataCommand)(nil), "Report.DataCommand")
	proto.RegisterEnum("Report.DataCommand_CommandType", DataCommand_CommandType_name, DataCommand_CommandType_value)
}

func init() { proto.RegisterFile("data.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x92, 0xbd, 0x6a, 0xf3, 0x30,
	0x14, 0x86, 0xbf, 0x38, 0x8e, 0x93, 0x1c, 0xe7, 0xc7, 0x9f, 0x4a, 0x41, 0x94, 0x96, 0xa6, 0x9e,
	0xb2, 0xd4, 0x43, 0x7a, 0x05, 0x26, 0xce, 0x10, 0xc8, 0x1f, 0x8e, 0xdb, 0xa9, 0x20, 0x14, 0xa4,
	0xc1, 0x25, 0xb6, 0x8c, 0x2c, 0x0f, 0xd9, 0xb2, 0xb7, 0x77, 0xd2, 0x9b, 0x2c, 0x52, 0x6c, 0xc8,
	0xd0, 0xb5, 0x93, 0xe0, 0xd1, 0xab, 0xf3, 0x1e, 0x1e, 0x04, 0xc0, 0xa8, 0xa2, 0x41, 0x21, 0x85,
	0x12, 0xc8, 0x89, 0x79, 0x21, 0xa4, 0xf2, 0xdf, 0xa1, 0xbb, 0x16, 0x79, 0xaa, 0x84, 0x44, 0x00,
	0x56, 0xca, 0x70, 0x6b, 0xd2, 0x9a, 0x0e, 0x11, 0x02, 0xc8, 0x04, 0xab, 0x4a, 0x42, 0x19, 0x93,
	0xd8, 0x32, 0xec, 0x3f, 0xf4, 0xf5, 0x00, 0xa2, 0x4e, 0x05, 0xc7, 0x6d, 0x83, 0x3c, 0xe8, 0x19,
	0x74, 0xe4, 0x39, 0xb6, 0x0d, 0x19, 0x80, 0xad, 0x09, 0xee, 0x4c, 0x5a, 0xd3, 0x81, 0xff, 0x01,
	0x9d, 0xf0, 0xa8, 0xf8, 0x5f, 0xcc, 0x46, 0x23, 0x70, 0x4a, 0x45, 0x55, 0x55, 0x62, 0x47, 0xdf,
	0xfa, 0xdf, 0x16, 0xb8, 0x11, 0x55, 0x74, 0x2e, 0xb2, 0x8c, 0xe6, 0x4c, 0xa7, 0xab, 0xaa, 0x2e,
	0xed, 0x23, 0x17, 0xda, 0x2a, 0x65, 0xa6, 0xcd, 0x46, 0xb7, 0x30, 0x2c, 0xb9, 0x4c, 0xe9, 0x91,
	0xe4, 0x55, 0x76, 0xe0, 0xb2, 0x6e, 0xbc, 0x01, 0xb7, 0xc6, 0x5a, 0x4d, 0x5d, 0xfa, 0x0c, 0xb6,
	0x59, 0x4a, 0x97, 0x8e, 0x66, 0x8f, 0xc1, 0xc5, 0x5b, 0x70, 0xd5, 0x14, 0xd4, 0x67, 0x72, 0x2a,
	0x38, 0x7a, 0x82, 0x5e, 0x76, 0xf1, 0xa9, 0xf7, 0x6a, 0x4f, 0xdd, 0xd9, 0xb8, 0x79, 0xd2, 0x78,
	0x7e, 0x00, 0x87, 0x6a, 0x29, 0x25, 0xee, 0x9a, 0xc0, 0xb0, 0x09, 0x18, 0x55, 0x3e, 0x03, 0xf7,
	0x7a, 0xe0, 0x18, 0xdc, 0xf9, 0x3a, 0x21, 0xcb, 0xcd, 0x5b, 0xb8, 0x5a, 0x46, 0xde, 0x3f, 0xe4,
	0xc3, 0xbd, 0x06, 0xf1, 0x62, 0x47, 0xa2, 0x30, 0x09, 0xc9, 0xeb, 0x6e, 0xb5, 0x0d, 0x23, 0xb2,
	0xde, 0x6e, 0x96, 0xc9, 0x36, 0xde, 0x7b, 0x9f, 0x67, 0x0b, 0x4d, 0xe0, 0xee, 0xb7, 0x4c, 0xb8,
	0x4a, 0x16, 0xf1, 0xde, 0xfb, 0x3a, 0x5b, 0x07, 0xc7, 0x7c, 0x83, 0x97, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb2, 0x3b, 0xfb, 0x41, 0x14, 0x02, 0x00, 0x00,
}
